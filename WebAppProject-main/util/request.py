import json
# from multipart import parse_multipart
class Request:

    def __init__(self, request: bytes):
        # TODO: parse the bytes of the request and populate the following instance variables

        decodedArray = request.split(b'\r\n\r\n')

        requestAndHeader = str(decodedArray[0], encoding='utf-8')
        body = b'\r\n\r\n'.join(decodedArray[1:])
        #body = decodedArray[1]

        requestAndHeaderArray = requestAndHeader.split("\r\n")

        requestLine = requestAndHeaderArray.pop(0)
        requestLineArray = requestLine.split(" ")
        type = requestLineArray.pop(0) #“GET” or something
        version = requestLineArray.pop() #"HTTP/1.1"
        path = requestLineArray.pop()
        cookies = {}

        headers = {}

        for line in requestAndHeaderArray:
            currentHeader = line.split(": ")
            if currentHeader[0] != "Cookie":
                key = currentHeader[0]
                value = currentHeader[1]
                headers.update({key: value})
            else:
                key = currentHeader[0]
                value = currentHeader[1]
                headers.update({key: value})
                cookiesString = currentHeader[1]
                cookiesArray = cookiesString.split("; ")
                for currentCookie in cookiesArray:
                    keyAndValue = currentCookie.split("=")
                    cookies.update({keyAndValue[0]: keyAndValue[1]})

        self.body = body
        self.method = type
        self.path = path
        self.http_version = version
        self.headers = headers
        self.cookies = cookies


# def test1():
#     request = Request(b'POST /post-pic HTTP/1.1\r\nHost: localhost:8080\r\nConnection: keep-alive\r\nContent-Length: 34966\r\nCache-Control: max-age=0\r\nsec-ch-ua: "Google Chrome";v="123", "Not:A-Brand";v="8", "Chromium";v="123"\r\nsec-ch-ua-mobile: ?0\r\nsec-ch-ua-platform: "macOS"\r\nOrigin: http://localhost:8080\r\nDNT: 1\r\nUpgrade-Insecure-Requests: 1\r\nContent-Type: multipart/form-data; boundary=----WebKitFormBoundaryY7bjzl1H6gA0D9Ei\r\nUser-Agent: Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/123.0.0.0 Safari/537.36\r\nAccept: text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.7\r\nSec-Fetch-Site: same-origin\r\nSec-Fetch-Mode: navigate\r\nSec-Fetch-User: ?1\r\nSec-Fetch-Dest: document\r\nReferer: http://localhost:8080/\r\nAccept-Encoding: gzip, deflate, br, zstd\r\nAccept-Language: zh-CN,zh;q=0.9,en;q=0.8\r\nCookie: visits=3\r\n\r\n------WebKitFormBoundaryY7bjzl1H6gA0D9Ei\r\nContent-Disposition: form-data; name="upload"; filename="30E9CADE9B5F2F2FA719F60EE5B3B378.jpg"\r\nContent-Type: image/jpeg\r\n\r\n\xff\xd8\xff\xe0\x00\x10JFIF\x00\x01\x01\x00\x00\x01\x00\x01\x00\x00\xff\xe1\x00\xcaExif\x00\x00MM\x00*\x00\x00\x00\x08\x00\x06\x01\x12\x00\x03\x00\x00\x00\x01\x00\x01\x00\x00\x01\x1a\x00\x05\x00\x00\x00\x01\x00\x00\x00V\x01\x1b\x00\x05\x00\x00\x00\x01\x00\x00\x00^\x01(\x00\x03\x00\x00\x00\x01\x00\x02\x00\x00\x02\x13\x00\x03\x00\x00\x00\x01\x00\x01\x00\x00\x87i\x00\x04\x00\x00\x00\x01\x00\x00\x00f\x00\x00\x00\x00\x00\x00\x00H\x00\x00\x00\x01\x00\x00\x00H\x00\x00\x00\x01\x00\x07\x90\x00\x00\x07\x00\x00\x00\x040221\x91\x01\x00\x07\x00\x00\x00\x04\x01\x02\x03\x00\xa0\x00\x00\x07\x00\x00\x00\x040100\xa0\x01\x00\x03\x00\x00\x00\x01\x00\x01\x00\x00\xa0\x02\x00\x04\x00\x00\x00\x01\x00\x00\x02X\xa0\x03\x00\x04\x00\x00\x00\x01\x00\x00\x01\xf3\xa4\x06\x00\x03\x00\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xff\xdb\x00C\x00\x06\x04\x05\x06\x05\x04\x06\x06\x05\x06\x07\x07\x06\x08\n\x10\n\n\t\t\n\x14\x0e\x0f\x0c\x10\x17\x14\x18\x18\x17\x14\x16\x16\x1a\x1d%\x1f\x1a\x1b#\x1c\x16\x16 , #&\')*)\x19\x1f-0-(0%()(\xff\xdb\x00C\x01\x07\x07\x07\n\x08\n\x13\n\n\x13(\x1a\x16\x1a((((((((((((((((((((((((((((((((((((((((((((((((((\xff\xc2\x00\x11\x08\x01\xf3\x02X\x03\x01"\x00\x02\x11\x01\x03\x11\x01\xff\xc4\x00\x1c\x00\x01\x00\x02\x03\x01\x01\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x04\x05\x03\x06\x07\x02\x01\x08\xff\xc4\x00\x18\x01\x01\x01\x01\x01\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x01\x02\x03\x04\xff\xda\x00\x0c\x03\x01\x00\x02\x10\x03\x10\x00\x00\x01\xea\x80\x00\x00\x00\x00\x00\x00\x00\x00\x07\xc3\xea\xa7]7\x86\x81\xae\xafap\xad\xf57\x86\x0c\xe0\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xab2i\xd5\x94+\x9f\x02\x1d|\x81\xeb\ny|\xc4\\u\xae\'f~\x81j;<g\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00B\xe7[F\xb8\xb4q\xa7\xc0\xb3\xcd,\xca\xf3&,\xb8\xcf8sL!\xe7\xc9\x00\x9d\xdd8\x05\xd3]\xe3\xdd5\xcc\x80\x80\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00h\x9a\xce\xc7\xae\xdb\x86\xb5R\x9e>\x06O\x1e\xf1\x9e&D\x90\xbe+\xaf\xf1-m\xf6\x0c\x93]\x0bm\xe7\xf7\x13\xa6\xec\x8d\xf2\xf9\xe5\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00|\xc1\xa7G\xdd\n\x1c{\xaf\x91\xedlZ\xd7fn8f\xe8d\xda\xca\x9b\xa8\xfb7\\\xaf\x17\xf8\x0el\xbf/\xdb\xa6\xb3\xa8\xb3\x9a\xbb\xd3o\xa8\xb5\xe7\xebY\xea-\xd8\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x05VnpC\xd3\xbaV\xd0r=\xa7n\xa2\x9e\x8a\xf9\xb8vih\xb6\x9c\xd9\x1ct\xfc{U&}TP,\xa3k0,c}I\x9b$\x9cW\x1a^\\\x1f\x1d,k\xe4Z\xde[69\x15n:\xe5~\x9f\x85v\xfb\xdeim]\xfcH\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x05~\xab\xbcQ\xebxn\xf4]\xe3\x97O^}\xf8\xcep\xe9\xd9&kU\x90/u\xeb\xd2]e\xb5D\x9b\xbe=o\xee\xf9@\x9b\xf3\x1c\xe9\x83l\xd3\xf7\xfb\xceM\xde\xb9\xb1\xce\\\xcf\x9b\xf5^SY/\xb5\xebZ\xef\xbe\xaam\xa0\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x05\x05\xee\xbb\xab\xacl\x1a\xf4\xf9\xdfo\xcbK\x13\x9f;\xbdSD\xbdt\xbf\xa0\xb7\xaa\xbd\'@\x9b)\xca\xb2\x8eN\xa1\xbe[\xd6=n\xeb;\x97\xbfr')
#     res = parse_multipart(request)
#     pass
#     # assert request.method == "GET"
#     # assert "Host" in request.headers
#     # assert request.headers["Host"] == "localhost:8080"  # note: The leading space in the header value must be removed
#     # assert request.body == b""  # There is no body for this request.
#     # # When parsing POST requests, the body must be in bytes, not str

#     # # This is the start of a simple way (ie. no external libraries) to test your code.
#     # # It's recommended that you complete this test and add others, including at least one
#     # # test using a POST request. Also, ensure that the types of all values are correct


# if __name__ == '__main__':
#     test1()
